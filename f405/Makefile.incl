########################################
#  Project in subfolder
#BINARY		= [project name]
#SRCFILES	= [source files .c]
#all: elf bin ??? why here?
#include ../Makefile.incl
#######################################
#######################################
#  Makefile.incl   TGT as in target   #
#######################################
.PHONY: images clean elf bin hex srec list all dfuflash stflash flash debug

PREFIX		?= arm-none-eabi
TOP_DIR 	:= $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

#change this for other mcu families
FP_FLAGS	?= -mfloat-abi=hard -mfpu=fpv4-sp-d16
ARCH_FLAGS	= -mthumb -mcpu=cortex-m4 $(FP_FLAGS)
ASFLAGS		= -mthumb -mcpu=cortex-m4

CC		:= $(PREFIX)-gcc
#CXX		:= $(PREFIX)-g++
LD		:= $(PREFIX)-gcc
AR		:= $(PREFIX)-ar
AS		:= $(PREFIX)-as
OBJCOPY		:= $(PREFIX)-objcopy
SIZE		:= $(PREFIX)-size
OBJDUMP		:= $(PREFIX)-objdump
GDB		:= $(PREFIX)-gdb
OPT		:= -Os -ggdb # big Os size -g3 or -ggdb(#defs included, no tested)
#CSTD		?= -std=c99

SRCFILES += $(TOP_DIR)/startup.s
TEMPC 		= $(patsubst %.c,%.o,$(SRCFILES))
OBJS 		= $(patsubst %.s,%.o,$(TEMPC))


#tell me which linkerScript to use
LDSCRIPT	?= $(TOP_DIR)/405.ld

TGT_CFLAGS	+= $(OPT) $(CSTD)
TGT_CFLAGS	+= $(ARCH_FLAGS)
TGT_CFLAGS	+= -Wextra -Wshadow -Wimplicit-function-declaration
TGT_CFLAGS	+= -Wredundant-decls -Wstrict-prototypes
TGT_CFLAGS	+= -fno-common -ffunction-sections -fdata-sections
#TGT_CFLAGS	+= $(HDRS)
TGT_CFLAGS	+= -I$(TOP_DIR)/arm_cmsis #ln -s
TGT_CFLAGS	+= -I$(TOP_DIR)/device-f4 #ln -s
#-Wmissing-prototypes

#TGT_CXXFLAGS	+= $(OPT) $(CXXSTD)
#TGT_CXXFLAGS	+= $(ARCH_FLAGS)
#TGT_CXXFLAGS	+= -Wextra -Wshadow -Wredundant-decls  -Weffc++
#TGT_CXXFLAGS	+= -fno-common -ffunction-sections -fdata-sections

#TGT_CPPFLAGS	+= -MD
#TGT_CPPFLAGS	+= -Wall -Wundef
#TGT_CPPFLAGS	+= $(DEFS)
#TGT_CPPFLAGS	+= -I$(OPENCM3_DIR)/include
##TGT_CPPFLAGS	+= -I$(TOP_DIR)/rtos/libwwg/include

TGT_LDFLAGS	+= --static -nostartfiles
TGT_LDFLAGS	+= -T$(LDSCRIPT)
TGT_LDFLAGS	+= $(ARCH_FLAGS)
TGT_LDFLAGS	+= -Wl,-Map=$(*).map
TGT_LDFLAGS	+= -Wl,--gc-sections

LDLIBS		+= -specs=nosys.specs
LDLIBS		+= -Wl,--start-group -lc -lgcc -lnosys -Wl,--end-group
##LDLIBS -L<search path for lib file> -l<libname> #(.a) file 
#LDLIBS		+= -L$(OPENCM3_DIR)/lib -lopencm3_stm32f4

.SUFFIXES:	.elf .bin .hex .srec .list .map .images
.SECONDEXPANSION:
.SECONDARY:

elf:	$(DEPS) $(BINARY).elf
bin:	$(DEPS) $(BINARY).bin
hex:	$(DEPS) $(BINARY).hex
srec:	$(DEPS) $(BINARY).srec
list:	$(DEPS) $(BINARY).list

# Define a helper macro for debugging make errors online
# you can type "make print-OPENCM3_DIR" and it will show you
# how that ended up being resolved by all of the included
# makefiles.
print-%:
	@echo $*=$($*)

%.images: %.bin %.hex %.srec %.list %.map
	@#printf "*** $* images generated ***\n"

%.bin: %.elf
	@#printf "  OBJCOPY $(*).bin\n"
	$(OBJCOPY) -Obinary $(*).elf $(*).bin

%.hex: %.elf
	@#printf "  OBJCOPY $(*).hex\n"
	$(OBJCOPY) -Oihex $(*).elf $(*).hex

%.srec: %.elf
	@#printf "  OBJCOPY $(*).srec\n"
	$(OBJCOPY) -Osrec $(*).elf $(*).srec

%.list: %.elf
	@#printf "  OBJDUMP $(*).list\n"
	$(OBJDUMP) -S $(*).elf > $(*).list

%.elf %.map: $(OBJS) $(LDSCRIPT)
#%.elf %.map %.images: $(OBJS) $(LDSCRIPT)
	$(LD) $(TGT_LDFLAGS) $(LDFLAGS) $(OBJS) $(LDLIBS) -o $(*).elf
	$(SIZE) $(BINARY).elf

%.o: %.c
	@#printf "  CC      $(*).c\n"
	$(CC) $(TGT_CFLAGS) $(CFLAGS) $(TGT_CPPFLAGS) $(CPPFLAGS) -o $(*).o -c $(*).c
#Linus says no cpp, so ...
#%.o: %.cxx
#	@#printf "  CXX     $(*).cxx\n"
#	$(CXX) $(TGT_CXXFLAGS) $(CXXFLAGS) $(TGT_CPPFLAGS) $(CPPFLAGS) -o $(*).o -c $(*).cxx
#%.o: %.cpp
#	@#printf "  CXX     $(*).cpp\n"
#	$(CXX) $(TGT_CXXFLAGS) $(CXXFLAGS) $(TGT_CPPFLAGS) $(CPPFLAGS) -o $(*).o -c $(*).cpp

%.o: %.asm
	$(AS) $(ASFLAGS) -o $*.o -c $<

clean: #generated.* opencm's stuff todelete
	@#printf "  CLEAN\n"
	$(RM) *.o *.d generated.* $(OBJS) $(patsubst %.o,%.d,$(OBJS))


clobber: clean
	rm -f *.elf *.bin *.hex *.srec *.list *.map $(CLOBBER)
flash: $(BINARY).elf
	@arm-none-eabi-gdb $< -ex "target extended-remote :3333" -ex "load" -ex "detach" -ex "quit"
debug: $(BINARY).elf
	@arm-none-eabi-gdb $< -ex "target extended-remote :3333" -ex "load"
dfuflash: $(BINARY).bin
	@dfu-util -a 0 -D $(BINARY).bin -s 0x08000000
stflash: $(BINARY).bin
	@st-flash --debug write $(BINARY).bin 0x08000000
all build: elf bin

#.PHONY: images clean elf bin hex srec list all dfuflash stflash flash debug

-include $(OBJS:.o=.d) #.d dependency related stuff

# End

